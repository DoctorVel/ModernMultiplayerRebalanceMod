class X2Ability_Centurion extends X2Ability;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(PsionicShield());

	return Templates;
}

static function X2DataTemplate PsionicShield()
{
	local X2AbilityTemplate Template;
	local X2AbilityCost_ActionPoints ActionPointCost;
	local X2AbilityCooldown Cooldown;
	local X2Condition_UnitProperty UnitPropertyCondition;
	local X2Condition_UnitEffects ExcludeEffectsCondition;
	local X2Condition_UnitTypeNew  UnitTypeCondition;
	local X2Condition_UnitEffectsApplying ApplyingEffectsCondition;
	local X2Effect_EnergyShield PsionicShieldEffect;
	local X2Effect_PsionicShieldReduce DamageEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'PsionicShield');
	Template.IconImage = "img:///Sectoidl_MindMerge.Sectoidl_MindMerge";
	Template.Hostility = eHostility_Offensive;
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_AlwaysShow;

	Template.AdditionalAbilities.AddItem('HolyWarriorDeath');

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	Template.AbilityCosts.AddItem(ActionPointCost);

	Cooldown = new class'X2AbilityCooldown';
	Cooldown.iNumTurns = 1;
	Template.AbilityCooldown = Cooldown;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	// Shooter Conditions
	//
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();	// Discuss with Jake/Design what exclusions are allowed here

	ApplyingEffectsCondition = new class'X2Condition_UnitEffectsApplying';
	ApplyingEffectsCondition.AddExcludeEffect(class'X2Ability_AdvPriest'.default.HolyWarriorEffectName, 'AA_AbilityUnavailable');
	ApplyingEffectsCondition.AddExcludeEffect(class'X2Effect_EnergyShield'.default.EffectName, 'AA_AbilityUnavailable');
	ApplyingEffectsCondition.AddExcludeEffect(class'X2Effect_MindControl'.default.EffectName, 'AA_UnitIsMindControlling');
	ApplyingEffectsCondition.AddExcludeEffect('PsionicShield', 'AA_DuplicateEffectIgnored');
	Template.AbilityTargetConditions.AddItem(ApplyingEffectsCondition);

	// Target Conditions
	//
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);
	
	UnitTypeCondition = new class'X2Condition_UnitTypeNew';
	Template.AbilityTargetConditions.AddItem(UnitTypeCondition);

	UnitPropertyCondition = new class'X2Condition_UnitProperty';
	UnitPropertyCondition.ExcludeDead = true;
	UnitPropertyCondition.ExcludeHostileToSource = true;
	UnitPropertyCondition.ExcludeFriendlyToSource = false;
	UnitPropertyCondition.ExcludeRobotic = true;
	UnitPropertyCondition.FailOnNonUnits = true;
	UnitPropertyCondition.ExcludeCivilian = true;
	Template.AbilityTargetConditions.AddItem(UnitPropertyCondition);

	ExcludeEffectsCondition = new class'X2Condition_UnitEffects';
	ExcludeEffectsCondition.AddExcludeEffect(class'X2Ability_AdvPriest'.default.HolyWarriorEffectName, 'AA_AbilityUnavailable');
	ExcludeEffectsCondition.AddExcludeEffect(class'X2Effect_EnergyShield'.default.EffectName, 'AA_DuplicateEffectIgnored');
	ExcludeEffectsCondition.AddExcludeEffect('PsionicShield', 'AA_DuplicateEffectIgnored');
	Template.AbilityTargetConditions.AddItem(ExcludeEffectsCondition);
	
	PsionicShieldEffect = new class'X2Effect_EnergyShield';
	PsionicShieldEffect.BuildPersistentEffect(1, true, false, true);
	PsionicShieldEffect.SetDisplayInfo (ePerkBuff_Bonus, Template.LocFriendlyName, Template.GetMyHelpText(), Template.IconImage,,, Template.AbilitySourceName);
	PsionicShieldEffect.DuplicateResponse = eDupe_Ignore;
	PsionicShieldEffect.AddPersistentStatChange(eStat_ShieldHP, 6);
	PsionicShieldEffect.AddPersistentStatChange(eStat_Will, 20);
	PsionicShieldEffect.AddPersistentStatChange(eStat_Mobility, 2);
	PsionicShieldEffect.EffectName='PsionicShield';
	PsionicShieldEffect.bRemoveWhenTargetDies = true;
	PsionicShieldEffect.bRemoveWhenSourceDies = true;
	Template.AddTargetEffect(PsionicShieldEffect);

	Template.AddShooterEffectExclusions();

	DamageEffect = new class'X2Effect_PsionicShieldReduce';
	DamageEffect.BuildPersistentEffect(1, true, false, true);
	DamageEffect.SetDisplayInfo(ePerkBuff_Bonus, Template.LocFriendlyName, Template.GetMyHelpText(), "img:///Sectoidl_MindMerge.Sectoidl_MindMerge", true);
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	DamageEffect.bRemoveWhenTargetDies = true;
	DamageEffect.bRemoveWhenSourceDies = true;
    Template.bShowActivation = false;
    Template.bSkipFireAction = false;
	Template.AddTargetEffect(DamageEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = TypicalAbility_BuildVisualization;
	Template.CustomFireAnim = 'HL_PsionicShield';
//BEGIN AUTOGENERATED CODE: Template Overrides 'HolyWarriorM1'
//BEGIN AUTOGENERATED CODE: Template Overrides 'HolyWarriorM2'
//BEGIN AUTOGENERATED CODE: Template Overrides 'HolyWarriorM3'
	Template.bFrameEvenWhenUnitIsHidden = true;
	Template.CinescriptCameraType = "HL_PsionicShield";
//END AUTOGENERATED CODE: Template Overrides 'HolyWarriorM3'
//END AUTOGENERATED CODE: Template Overrides 'HolyWarriorM2'
//END AUTOGENERATED CODE: Template Overrides 'HolyWarriorM1'
	Template.bShowActivation = true;

	//	Template.LostSpawnIncreasePerUse = class'X2AbilityTemplateManager'.default.MeleeLostSpawnIncreasePerUse;

	return Template;
}


