class X2Ability_VulnerabilityToFire extends X2Ability;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;
	
	Templates.AddItem(CreateVulnerabilityToFire());
	Templates.AddItem(PurePassive('VulnerabilityToFirePassive', "img:///UILibrary_PerkIcons.UIPerk_flamethrower", false, 'eAbilitySource_Perk', true));
	Templates.AddItem(PurePassive('DarkEventAbility_UndyingLoyaltyPassive', "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Undying_Loyalty", false, 'eAbilitySource_Perk', true));
	Templates.AddItem(PurePassive('ChosenKineticPlatingPassive', "img:///UILibrary_XPACK_Common.PerkIcons.str_kineticplating", false, 'eAbilitySource_Perk', true));
	Templates.AddItem(PurePassive('ZombieInitializationPassive', "img:///UILibrary_PerkIcons.UIPerk_mentalfortress", false, 'eAbilitySource_Perk', true));

	return Templates;
}

static function X2DataTemplate CreateVulnerabilityToFire()
{
	local X2AbilityTemplate Template;
	local X2Effect_TargetDamageTypeBonus BonusDamage;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'VulnerabilityToFire');

	Template.IconImage = "img:///UILibrary_PerkIcons.UIPerk_flamethrower";
	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = EAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;
	Template.bDontDisplayInAbilitySummary = true;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);


	BonusDamage = new class'X2Effect_TargetDamageTypeBonus';
	BonusDamage.EffectName = 'TheLostFireVulnerability';
	BonusDamage.BuildPersistentEffect(1, true, false, true);
	BonusDamage.SetDisplayInfo(ePerkBuff_Penalty, class'X2Ability_TheLost'.default.FireVulnerabilityFriendlyName, class'X2Ability_TheLost'.default.FireVulnerabilityFriendlyDesc, "img:///UILibrary_PerkIcons.UIPerk_burn", true);
	BonusDamage.DuplicateResponse = eDupe_Ignore;
	BonusDamage.BonusDmg = class'X2Ability_TheLost'.default.LOST_BURNING_DMG_MULTIPLIER;
	BonusDamage.BonusModType = MODOP_Multiplication;
	BonusDamage.BonusDamageTypes.AddItem('fire');
	Template.AddTargetEffect(BonusDamage);

	Template.AdditionalAbilities.AddItem('VulnerabilityToFirePassive');
	Template.AdditionalAbilities.AddItem('LostCatchingFire');
	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}

